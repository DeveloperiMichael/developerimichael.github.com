<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>曾静的技术博客</title>
    <description>嗨，我是曾静 (@devzeng)，目前暂居深圳。</description>
    <link>http://blog.devzeng.com/</link>
    <atom:link href="http://blog.devzeng.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 May 2017 14:03:22 +0800</pubDate>
    <lastBuildDate>Fri, 05 May 2017 14:03:22 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Jersey整合Swagger自动生成API文档</title>
        <description>&lt;p&gt;之前写过一篇文章&lt;a href=&quot;http://blog.devzeng.com/blog/java-restful-with-jersey.html&quot;&gt;《使用Jersey开发REST服务》&lt;/a&gt;，里面简单介绍了使用Jersey来快速创建REST的API服务。&lt;/p&gt;

&lt;p&gt;REST API都是要对外提供服务的，那么文档是必须的。经常要给其他人员提供文档，每次都是要不断的维护word/excel的文件，挺麻烦的。能不能做到自动生成呢？答案是可以的，swagger就是这样的一个组件帮助我们快速生成，让开发人员只需要关注功能的开发即可，后续的工作就交给Swagger就好了。&lt;/p&gt;

&lt;p&gt;下面简单介绍下如何在Jersey的项目中集成Swagger。&lt;/p&gt;

&lt;h3 id=&quot;1pomxml加入swagger的依赖&quot;&gt;1、pom.xml加入swagger的依赖&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.swagger&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;swagger-jersey2-jaxrs&amp;lt;/artifactId&amp;gt; 
    &amp;lt;version&amp;gt;1.5.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2修改webxml配置&quot;&gt;2、修改web.xml配置&lt;/h3&gt;

&lt;h4 id=&quot;1-修改jersey配置&quot;&gt;(1) 修改Jersey配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- jersey --&amp;gt;
&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;jersey&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.glassfish.jersey.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;jersey.config.server.provider.packages&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;io.swagger.jaxrs.listing,com.devzeng.service.schedule.api&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;jersey&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/api/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2新增swagger配置&quot;&gt;（2）新增swagger配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- swagger --&amp;gt;
&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;Jersey2Config&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;io.swagger.jersey.config.JerseyJaxrsConfig&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;api.version&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;1.0.0&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;swagger.api.basepath&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;http://localhost:8080/api&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;2&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swagger.api.basepath&lt;/code&gt;:这个是api访问的baseurl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3配置注解&quot;&gt;3、配置注解&lt;/h3&gt;

&lt;h3 id=&quot;4配置swagger-ui&quot;&gt;4、配置swagger-ui&lt;/h3&gt;

&lt;h4 id=&quot;1-下载swagger-ui&quot;&gt;(1) 下载swagger-ui&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/swagger-api/swagger-ui&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;推荐使用2.x版本&lt;/p&gt;

&lt;h4 id=&quot;2-拷贝dist目录下面的文件到webroot下面&quot;&gt;(2) 拷贝dist目录下面的文件到webroot下面&lt;/h4&gt;

&lt;h4 id=&quot;3-修改indexhtml页面的url地址&quot;&gt;(3) 修改index.html页面的url地址&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url = &quot;http://localhost:8080/api/swagger.json&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;生成的文档效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jersey-swagger/swagger-demo.jpg&quot; alt=&quot;swagger-demo.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1、&lt;a href=&quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-Jersey-2.X-Project-Setup-1.5#configure-and-initialize-swagger&quot;&gt;Swagger Core Jersey 2.X Project Setup 1.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;a href=&quot;https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X&quot;&gt;Swagger-Core Annotations&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 May 2017 21:51:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/jersey-swagger-api.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/jersey-swagger-api.html</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Windows环境下OpenSSL的编译和使用</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.openssl.org/&quot;&gt;OpenSSL&lt;/a&gt;是目前使用的非常广泛的加密算法库，基本上我们日常使用到的HTTPS、SSH都离不开它的身影。本文就在Windows环境下面编译最新版本的OpenSSL的步骤进行整理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/openssl-windows-compile/oepnssl-logo.png&quot; alt=&quot;oepnssl-logo.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;编译openssl&quot;&gt;编译OpenSSL&lt;/h3&gt;

&lt;h4 id=&quot;1编译环境准备&quot;&gt;1.编译环境准备&lt;/h4&gt;

&lt;h5 id=&quot;1-perl&quot;&gt;(1) perl&lt;/h5&gt;

&lt;p&gt;OpenSSL的编译需要使用到perl的环境，如果之前安装过可以跳过此步骤。&lt;/p&gt;

&lt;p&gt;1) 下载perl安装包&lt;/p&gt;

&lt;p&gt;根据操作系统的版本下载对应最新版本的perl（当前最新的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;5.22.3.2204&lt;/code&gt;），下载地址是：&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.activestate.com/activeperl/downloads&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/openssl-windows-compile/windows-perl-download-page.png&quot; alt=&quot;windows-perl-download-page.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2) 配置环境变量&lt;/p&gt;

&lt;p&gt;前往“&lt;code class=&quot;highlighter-rouge&quot;&gt;计算机&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;右键-属性&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;高级系统设置&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;环境变量&lt;/code&gt;”将&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Perl\site\bin;C:\Perl\bin;&lt;/code&gt;（Perl安装路径）添加到环境变量（如果前面有其他的配置使用&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;进行拼接）&lt;/p&gt;

&lt;p&gt;配置完成之后再cmd中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;perl -version&lt;/code&gt;,如果正确输出如下信息表示成功安装。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is perl 5, version 22, xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-openssl&quot;&gt;(2) openssl&lt;/h5&gt;

&lt;p&gt;前往OpenSSL的&lt;a href=&quot;https://www.openssl.org/&quot;&gt;官网&lt;/a&gt;下载最新最新版本的源码（当前最新的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;openssl-1.1.0e&lt;/code&gt;），下载完成之后解压到D盘。下载界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/openssl-windows-compile/openssl-source-download-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3-ide安装&quot;&gt;(3) IDE安装&lt;/h5&gt;

&lt;p&gt;本文使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio 2010&lt;/code&gt;版本&lt;/p&gt;

&lt;h4 id=&quot;2编译openssl&quot;&gt;2.编译OpenSSL&lt;/h4&gt;

&lt;p&gt;打开命令行工具，cd到OpenSSL源码所在路径。&lt;/p&gt;

&lt;h5 id=&quot;1-配置编译模式&quot;&gt;(1) 配置编译模式&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;perl Configure VC-WIN32 no-asm --prefix=d:\openssl_lib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configure 后面的选项可选值有&lt;code class=&quot;highlighter-rouge&quot;&gt; VC-WIN32(32位) | VC-WIN64A(64位AMD) | VC-WIN64I(64位Intel) | VC-CE(Windows CE)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;prefix: 表示生成的lib文件存放路径&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2-编译生成&quot;&gt;(2) 编译生成&lt;/h5&gt;

&lt;p&gt;1) 编译源码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2) 测试&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmake test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3) 生成可执行文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmake install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完成上面的三个步骤之后在&lt;code class=&quot;highlighter-rouge&quot;&gt;d:\openssl_lib&lt;/code&gt;这个目录下面会生成四个文件夹（include/lib/bin/html)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;目录下面存放的shi头文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;目录是生成的静态库文件,文件的后缀是&lt;code class=&quot;highlighter-rouge&quot;&gt;.lib&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;目录下面存放的是dll文件和exe文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;目录下面存放的是文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;openssl的简单使用&quot;&gt;OpenSSL的简单使用&lt;/h3&gt;

&lt;h4 id=&quot;1注册dll文件&quot;&gt;1.注册dll文件&lt;/h4&gt;

&lt;p&gt;执行下面两个步骤实现dll文件注册：&lt;/p&gt;

&lt;p&gt;1) 将bin目录下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;libcrypto-1_1.dll&lt;/code&gt;文件拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Windows\System32&lt;/code&gt;目录下面&lt;/p&gt;

&lt;p&gt;2) 在运行(&lt;code class=&quot;highlighter-rouge&quot;&gt;win+R&lt;/code&gt;)中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;regsvr32 libcrypto-1_1.dll&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2创建示例项目&quot;&gt;2.创建示例项目&lt;/h4&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio 2010&lt;/code&gt;创建一个C++的&lt;code class=&quot;highlighter-rouge&quot;&gt;CLR命令行控制台程序&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;3配置openssl依赖&quot;&gt;3.配置OpenSSL依赖&lt;/h4&gt;

&lt;p&gt;需要配置两个内容包含目录和库目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;项目名称右键 -&amp;gt; 配置属性 -&amp;gt; VC++目录&lt;/code&gt;按照下面的配置方式进行配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/openssl-windows-compile/visual-studio-config.png&quot; alt=&quot;visual-studio-config.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4示例代码&quot;&gt;4.示例代码&lt;/h4&gt;

&lt;p&gt;下面以SHA256加密算法为例进行测试&lt;/p&gt;

&lt;h5 id=&quot;1-头文件&quot;&gt;(1) 头文件&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;openssl/sha.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-链接库&quot;&gt;(2) 链接库&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma comment(lib, &quot;libcrypto.lib&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-示例代码&quot;&gt;(2) 示例代码&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void sha256(char* string, char outputBuffer[64])
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&amp;amp;sha256);
    SHA256_Update(&amp;amp;sha256, string, strlen(string));
    SHA256_Final(hash, &amp;amp;sha256);
    int i = 0;
    for(i = 0; i &amp;lt; SHA256_DIGEST_LENGTH; i++)
    {
        sprintf(outputBuffer + (i * 2), &quot;%02x&quot;, hash[i]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1、&lt;a href=&quot;http://blog.163.com/xiaoting_hu/blog/static/50464772201310415042524/&quot;&gt;VS2010中编译openssl的步骤和使用设置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;a href=&quot;http://blogger.org.cn/blog/more.asp?name=OpenSSL&amp;amp;id=18972&quot;&gt;OpenSSL在Windows下的编译安装&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3、&lt;a href=&quot;http://www.cnblogs.com/chinalantian/p/5819105.html&quot;&gt;在 Windows下用 Visual Studio 编译 OpenSSL 1.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4、&lt;a href=&quot;https://github.com/openssl/openssl&quot;&gt;OpenSLL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5、&lt;a href=&quot;http://kb.cnblogs.com/page/94467/&quot;&gt;在VS2010项目中引用Lib静态库（以Openssl为例）&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 19:00:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/openssl-windows-compile.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/openssl-windows-compile.html</guid>
        
        <category>C++</category>
        
        
      </item>
    
      <item>
        <title>使用Jersey开发REST服务</title>
        <description>&lt;p&gt;REST 是英文 &lt;code class=&quot;highlighter-rouge&quot;&gt;Representational State Transfer&lt;/code&gt; 的缩写，有中文翻译为“&lt;code class=&quot;highlighter-rouge&quot;&gt;表述性状态转移&lt;/code&gt;”。REST 这个术语是由 Roy Fielding 在他的博士论文 &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;《 Architectural Styles and the Design of Network-based Software Architectures 》&lt;/a&gt;中提出的。REST 并非标准，而是一种开发 Web 应用的架构风格，可以将其理解为一种设计模式。REST 基于 HTTP，URI，以及 XML 这些现有的广泛流行的协议和标准，伴随着 REST，HTTP 协议得到了更加正确的使用。&lt;/p&gt;

&lt;p&gt;Jersy是一个业内使用非常广泛的Java Rest框架，本文就Jersey（2.13版本）的快速使用进行简单介绍，如需要了解更多的高级用法请查看官方的文档。&lt;/p&gt;

&lt;h3 id=&quot;1在pomxml中加入jersey相关依赖&quot;&gt;1、在pom.xml中加入jersey相关依赖&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jersey-container-grizzly2-servlet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jersey-container-servlet-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jersey-media-json-jackson&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2配置webxml文件&quot;&gt;2、配置web.xml文件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;Jersey REST Service&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.glassfish.jersey.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;jersey.config.server.provider.packages&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;com.devzeng.demo.api&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;Jersey REST Service&amp;lt;rvlet-name&amp;gt;
	&amp;lt;url-pattern&amp;gt;/api/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3开发&quot;&gt;3、开发&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Path(&quot;/api&quot;)
public class HelloApiService {

    @POST
	@Path(&quot;save&quot;)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String save(@FormParam(&quot;data&quot;) String data) {
		return &quot;{\&quot;message\&quot;:\&quot;save\&quot;}&quot;;
	}
	
	@GET
	@Path(&quot;list&quot;)
	@Produces(MediaType.APPLICATION_JSON)
	public String list(@QueryParam(&quot;from&quot;) String from, @QueryParam(&quot;to&quot;) String to) {
		return &quot;{\&quot;message\&quot;:\&quot;list\&quot;}&quot;; 
	}
	
	@GET
	@Path(&quot;detail/{id}&quot;)
	@Produces(MediaType.APPLICATION_JSON)
	public String detail(@PathParam(&quot;id&quot;) String id) {
		return &quot;{\&quot;message\&quot;:\&quot;detail\&quot;}&quot;; 
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;h4 id=&quot;1跨域问题解决&quot;&gt;(1)跨域问题解决&lt;/h4&gt;

&lt;p&gt;如果编写的API接口需要给前端进行调用，通常会遇到跨域的问题，可以使用下面的方式进行解决：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Provider
public class SceduleApiServiceCorsFilter implements ContainerResponseFilter {

	public void filter(ContainerRequestContext creq, ContainerResponseContext cres) throws IOException {
		cres.getHeaders().add(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
        cres.getHeaders().add(&quot;Access-Control-Allow-Headers&quot;, &quot;origin, content-type, accept, authorization&quot;);
        cres.getHeaders().add(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);
        cres.getHeaders().add(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, PUT, DELETE, OPTIONS, HEAD&quot;);
        cres.getHeaders().add(&quot;Access-Control-Max-Age&quot;, &quot;1209600&quot;);
	}
	
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2json--xml处理&quot;&gt;(2)JSON &amp;amp; XML处理&lt;/h4&gt;

&lt;p&gt;对于REST的接口通常需要返回的数据格式是JSON、XML。如果每次都是使用JSONObject这样的库来进行拼接，也是一件很麻烦的事情，为何不能直接返回对应的POJO对象呢。Jersey就支持这样的处理，为了让项目结构比较清晰，推荐建立一个单独的package（如com.devzeng.rest.pojo）,在该package创建一个POJO对象&lt;code class=&quot;highlighter-rouge&quot;&gt;MyCustomBean&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyCustomBean {

    private String name;
    private int age;

    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public int getAge() {
        return age;
    }
    
    public void setAge(int age) {
        this.age = age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;1json处理&quot;&gt;1)JSON处理&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@GET
@Path(&quot;hellojson&quot;)
@Produces(MediaType.APPLICATION_JSON)
public MyCustomBean sayHelloWithJson() {
    MyCustomBean bean = new MyCustomBean();
    bean(&quot;tom&quot;);
    bean.setAge(20);
    return bean;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;① &lt;code class=&quot;highlighter-rouge&quot;&gt;Produces&lt;/code&gt;注解需要指定返回的数据格式是JSON格式(&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaType.APPLICATION_JSON&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;② 如果启动之后报如下错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor aroundWriteTo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;表示POJO对象没有被序列化成JSON对象，需要添加相关的库，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;jersey-media-json-jackson&lt;/code&gt;模块：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jersey-media-json-jackson&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-xml处理&quot;&gt;2) XML处理&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@GET
@Path(&quot;helloxml&quot;)
@Produces(MediaType.APPLICATION_XML)
public MyCustomBean sayHelloWithXML() {
    MyCustomBean bean = new MyCustomBean();
    bean(&quot;tom&quot;);
    bean.setAge(20);
    return bean;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;① &lt;code class=&quot;highlighter-rouge&quot;&gt;Produces&lt;/code&gt;注解需要指定返回的数据格式是XML格式(&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaType.APPLICATION_XML&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;② 启动项目之后如果报如下错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor aroundWriteTo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要在POJO对象上面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;@XmlRootElement&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;@XmlRootElement&lt;/code&gt;表示将一个类或者是枚举类型映射成为一个XML元素。&lt;/p&gt;

&lt;h4 id=&quot;3中文乱码问题&quot;&gt;（3）中文乱码问题&lt;/h4&gt;

&lt;p&gt;1) 推荐将项目的所有格式设置为UTF-8;&lt;/p&gt;

&lt;p&gt;2) 如果还存在中文乱码的问题，需要将&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Produces(MediaType.APPLICATION_JSON + &quot;;charset=utf-8&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;https://jersey.java.net/&quot;&gt;《Jersey官方文档》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://www.gitbook.com/book/waylau/rest-in-action&quot;&gt;《REST 实战》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 18:00:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/java-restful-with-jersey.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/java-restful-with-jersey.html</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>iOS中使用Jenkins搭建持续集成环境</title>
        <description>&lt;p&gt;在持续集成(Continuous integration，简称CI)这块，&lt;a href=&quot;https://jenkins.io&quot;&gt;Jenkins&lt;/a&gt;无疑是目前使用的比较多的一个开源框架。本文就如何快速搭建一个iOS的持续集成环境进行介绍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/jenkins-logo.png&quot; alt=&quot;jenkins-logo.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jenkins安装&quot;&gt;Jenkins安装&lt;/h3&gt;

&lt;p&gt;系统要求：必须安装JDK 1.5以上版本，推荐安装最新版本的JDK。可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;查看是否安装JDK。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -version 
java version &quot;1.8.0_91&quot;
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;1下载jenkins&quot;&gt;1、下载Jenkins&lt;/h4&gt;

&lt;p&gt;到官网&lt;code class=&quot;highlighter-rouge&quot;&gt;https://jenkins.io&lt;/code&gt;选择下载最新版本的war包，推荐下载LTS(Long-Term Support，稳定版本)版本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/jenkins-download.png&quot; alt=&quot;jenkins-download.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2运行jenkins&quot;&gt;2、运行Jenkins&lt;/h4&gt;

&lt;p&gt;下载完成之后只有一个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;jenkins.war&lt;/code&gt;，运行Jenkins相当的方便，可以通过命令行直接运行，也可以将war包丢在Tomcat的webapp目录下面。&lt;/p&gt;

&lt;p&gt;在测试阶段可以使用命令行方式进行启动，在终端执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar jenkins.war
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;默认的端口号是8080，如果需要指定其他端口号可以使用如下方式(示例指定了9999端口号)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar jenkins.war --httpPort=9999  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;配置jenkins&quot;&gt;配置Jenkins&lt;/h3&gt;

&lt;p&gt;第一次运行启动&lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins&lt;/code&gt;，在浏览器打开&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9999&lt;/code&gt;，会出现如下界面，提示需要填写指定路径文件里面的内容（该内容也可以在终端上面看到）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/unlock-jenkins.png&quot; alt=&quot;unlock-jenkins.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入完成之后点击&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;进入到插件安装页面，为了避免后续出现一些问题建议选择安装推荐的插件(&lt;code class=&quot;highlighter-rouge&quot;&gt;install suggested plugins&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/customize-jenkins.png&quot; alt=&quot;customize-jenkins.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择安装推荐的插件(&lt;code class=&quot;highlighter-rouge&quot;&gt;install suggested plugins&lt;/code&gt;)后会出现安装进度界面，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/suggested-plugin-install.png&quot; alt=&quot;suggested-plugin-install.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;插件安装完成之后就可以创建管理员用户了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/create-admin-account.png&quot; alt=&quot;create-admin-account.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;全部做完之后就可以愉快的使用了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/install-success.png&quot; alt=&quot;install-success.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置slave&quot;&gt;配置slave&lt;/h3&gt;

&lt;p&gt;公司目前有几台Mac Mini，另外考虑到后续希望Android、Java Web开发的同事也能接入进来，目前是将Jenkins部署在CentOS上面，通过配置Slave的方式将Windows/MacOS/Linux进行统一管理，实现iOS、Android项目各自使用指定的节点。&lt;/p&gt;

&lt;p&gt;点击&lt;code class=&quot;highlighter-rouge&quot;&gt;系统管理&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;管理节点&lt;/code&gt;进入到节点管理界面，可以查看和管理目前系统配置的所有节点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/node-manage.png&quot; alt=&quot;node-manage.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建节点&quot;&gt;创建节点&lt;/h4&gt;

&lt;p&gt;（1）选择“新建节点”的菜单按钮，进入到节点的创建界面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/create-slave-node-1.png&quot; alt=&quot;create-slave-node-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（2）填写节点的一些基本信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-jenkins/create-slave-node-2.png&quot; alt=&quot;create-slave-node-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明：标签这个字段比较重要，这个字段用于识别是哪一个节点，在配置项目的时候会用到&lt;/p&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;正在完善中…&lt;/p&gt;

&lt;h4 id=&quot;1常见问题&quot;&gt;1、常见问题&lt;/h4&gt;

&lt;p&gt;（1）和fastlane一起使用的时候报字符集错误&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LANG=en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（2）执行脚本的时候报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;security unlock-keychain &quot;-p&quot; &quot;YOUR_KEYCHAIN_PWD&quot; &quot;/Users/YOUR_NAME/Library/Keychains/login.keychain&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1、&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html&quot;&gt;持续集成是什么？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;a href=&quot;https://jenkins.io&quot;&gt;Jenkins 官网&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Feb 2017 19:00:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/ios-ci-with-jenkins.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/ios-ci-with-jenkins.html</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS中fastlane的使用</title>
        <description>&lt;p&gt;对于一个iOS APP的发布上线，一般来说都需要经历:&lt;code class=&quot;highlighter-rouge&quot;&gt;编译打包&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;截图&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;填写一些说明文字&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;上传ipa到itunes connect&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;提交供审核&lt;/code&gt;。每次都要进行这么多“繁琐”的步骤，对于某些步骤可能一次还不能执行成功需要等着界面提示上传错误然后手动重新再来一次（想想都觉得可怕）。&lt;/p&gt;

&lt;p&gt;在日常开发中，打包也是最后上线不可缺少的环节，如果需要生成ipa文件通常需要在Xcode里点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt;，然后在弹出来的&lt;code class=&quot;highlighter-rouge&quot;&gt;Organizer&lt;/code&gt;中选择导出什么类型(&lt;code class=&quot;highlighter-rouge&quot;&gt;ad hoc&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;enterprise&lt;/code&gt;)的包。对于大项目来说动辄编译十分钟以上的来说，一天打几个包就差不多过去了。&lt;/p&gt;

&lt;p&gt;为了解决这些问题，&lt;a href=&quot;https://github.com/KrauseFx&quot;&gt;Felix Krause&lt;/a&gt;大神写了一个工具集&lt;a href=&quot;https://github.com/fastlane/fastlane&quot;&gt;fastlane&lt;/a&gt;。fastlane是一套使用Ruby写的自动化工具集，用于iOS和Android的自动化打包、发布等工作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-fastlane-in-action/fastlane-logo.png&quot; alt=&quot;fastlane-logo.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fastlane简介&quot;&gt;fastlane简介&lt;/h3&gt;

&lt;h4 id=&quot;1安装fastlane&quot;&gt;1、安装fastlane&lt;/h4&gt;

&lt;h5 id=&quot;1xcode命令行工具&quot;&gt;(1)Xcode命令行工具&lt;/h5&gt;

&lt;p&gt;确保Xcode命令行工具安装最新版本，使用如下命令进行安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2安装fastlane&quot;&gt;(2)安装fastlane&lt;/h5&gt;

&lt;p&gt;fastlane的安装非常简单，直接使用如下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install fastlane
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可完成安装。&lt;/p&gt;

&lt;h4 id=&quot;2fastlane组件&quot;&gt;2、fastlane组件&lt;/h4&gt;

&lt;p&gt;fastlane是一个工具集，包含了我们日常开发中上线时需要的大部分操作。比如gym/deliver等。下面对每个工具进行介绍：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/deliver#readme&quot;&gt;deliver&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动上传截图，APP的元数据，二进制(ipa)文件到iTunes Connect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/snapshot&quot;&gt;snapshot&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动截图（基于Xcode7的UI test）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/frameit&quot;&gt;frameit&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;可以把截的图片自动套上一层外边框&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/pem&quot;&gt;pem&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动生成、更新推送配置文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/sigh&quot;&gt;sigh&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;用来创建、更新、下载、修复Provisioning Profile的工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/produce&quot;&gt;produce&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;如果你的产品还没在iTunes Connect(iTC)或者Apple Developer Center(ADC)建立，produce可以自动帮你完成这些工作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/cert&quot;&gt;cert&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动创建管理iOS代码签名证书&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/pilot&quot;&gt;pilot&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;管理TestFlight的测试用户，上传二进制文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/boarding&quot;&gt;boarding&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;建立一个添加测试用户界面，发给测试者，可自行添加邮件地址，并同步到iTunes Connect(iTC)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/gym&quot;&gt;gym&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动化编译打包工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/match&quot;&gt;match&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;证书和配置文件管理工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/scan&quot;&gt;scan&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;自动运行测试工具，并且可以生成漂亮的HTML报告&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;3fastlane核心概念&quot;&gt;3、fastlane核心概念&lt;/h4&gt;

&lt;p&gt;在运行fastlane命令行工具的时候，会读取当前目录下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane&lt;/code&gt;文件夹里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt;配置文件。里面定义了一个个的&lt;code class=&quot;highlighter-rouge&quot;&gt;lane&lt;/code&gt;，下面是官方提供的一个示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lane :beta do
  increment_build_number
  cocoapods
  match
  testflight
  sh &quot;./customScript.sh&quot;
  slack
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;像&lt;code class=&quot;highlighter-rouge&quot;&gt;increment_build_number&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;这样的一条命令都是一个action，由这样的一个个action组成了一个lane（lane中可以调用其他的lane)。&lt;/p&gt;

&lt;h3 id=&quot;fastlane实战&quot;&gt;fastlane实战&lt;/h3&gt;

&lt;h4 id=&quot;1初始化&quot;&gt;1、初始化&lt;/h4&gt;

&lt;p&gt;在项目的根目录下面，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane init&lt;/code&gt;命令开始初始化。在执行的过程中会要求填写一些项目的资料，如Apple ID等，fastlane会自动检测当前目录下项目的App Name和App Identifier，可以选择自行输入这些信息。初始化完成会在当前目录下面生成一个fastlane的文件夹。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-fastlane-in-action/fastlane-init.png&quot; alt=&quot;fastlane-init.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最重要的两个文件就是Appfile和Fastfile，主要的说明如下：&lt;/p&gt;

&lt;p&gt;（1）Appfile里面存放了App的基本信息包括&lt;code class=&quot;highlighter-rouge&quot;&gt;app_identifier&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;apple_id&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;team_id&lt;/code&gt;等，如果在init的时候输入了正确的apple_id和密码会自动获取team_id。&lt;/p&gt;

&lt;p&gt;（2）Fastfile是最重要的一个文件，在这个里面可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面。&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;（1）如果在init的时候选择了在iTunes Connect创建App，那么fastlane会调用produce进行初始化，如果没有创建后续可以手动执行&lt;code class=&quot;highlighter-rouge&quot;&gt;produce init&lt;/code&gt;进行创建。如果没有在初始化的时候选择执行produce流程当然deliver也不会执行，后面可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;deliver init&lt;/code&gt;运行是一样的。&lt;/p&gt;

&lt;p&gt;（2）在iTunes Connect中成功创建App之后，fastlane文件夹里面会生成一个Deliverfile的文件。Deliverfile文件主要是deliver的一些配置信息。&lt;/p&gt;

&lt;h4 id=&quot;2fastfile文件&quot;&gt;2、Fastfile文件&lt;/h4&gt;

&lt;p&gt;Fastfile文件的主要结构如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane_version &quot;2.14.2&quot;
default_platform :ios

platform :ios do
	before_all do
   		cocoapods
  	end
  	
  	lane :test do
  	end
  	
  	lane :beta do
  	end
  	
  	lane :release do
  	end
  	
  	after_all do |lane|

  	end

  	error do |lane, exception|

  	end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;（1）fastlane_version：指定fastlane使用的最小版本&lt;/li&gt;
  &lt;li&gt;（2）default_platform：指定当前默认的平台，可以选择ios/android/mac&lt;/li&gt;
  &lt;li&gt;（3）before_all：在执行每一个lane之前都会调用这部分的内容&lt;/li&gt;
  &lt;li&gt;（4）after_all：在每个lane执行完成之后都会执行这部分的内容&lt;/li&gt;
  &lt;li&gt;（5）error：每个lane执行出错就会执行这部分的内容&lt;/li&gt;
  &lt;li&gt;（6）desc：对lane的描述，fastlane会自动将desc的内容生成说明文档&lt;/li&gt;
  &lt;li&gt;（7）lane：定义一个lane(任务)，可以理解为一个函数，我们在执行的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane [ios] lane名称&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3fastfile文件的编写&quot;&gt;3、Fastfile文件的编写&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lane :release do |option|
	#根据传入参数version设置app的版本号
	increment_version_number(version_number: option[:version]) 
	#自动增加build号
	increment_build_number
    #证书签名
    sigh
    #编译打包
    scheme_name = option[:scheme]
    configuration = 'Release'
    version = get_info_plist_value(path: &quot;./#{scheme_name}/Info.plist&quot;, key: &quot;CFBundleShortVersionString&quot;)
    build = get_info_plist_value(path: &quot;./#{scheme_name}/Info.plist&quot;, key: &quot;CFBundleVersion&quot;)
    output_directory = File.expand_path(&quot;..&quot;, Dir.pwd) + File::Separator + 'build'
    output_name = &quot;#{scheme_name}_#{configuration}_#{version}_#{build}_#{Time.now.strftime('%Y%m%d%H%M%S')}.ipa&quot;
    gym(scheme: scheme_name, clean: true, export_method:'appstore', configuration: configuration, output_directory: output_directory, output_name: output_name)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1、&lt;a href=&quot;https://fastlane.tools/&quot;&gt;官方网站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;a href=&quot;https://whlsxl.github.io&quot;&gt;小团队的自动化发布－Fastlane带来的全自动化发布&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3、&lt;a href=&quot;http://www.jianshu.com/p/1aebb0854c78&quot;&gt;Fastlane实战（一）：移动开发自动化之道&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4、&lt;a href=&quot;http://www.jianshu.com/p/0520192c9bd7&quot;&gt;Fastlane实战（二）：Action和Plugin机制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5、&lt;a href=&quot;http://www.jianshu.com/p/faae6f95cbd8&quot;&gt;Fastlane实战（五）：高级用法&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 21:00:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/ios-fastlane-in-action.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/ios-fastlane-in-action.html</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>使用Scrapy开发爬虫初探</title>
        <description>&lt;p&gt;近期一直都有关注数据的采集方面的开发，之前也用Python(urllib+BeautifulSoup)写过“爬虫”但是效果不是很好，表现在内存占用过高和做出来的东西不够通用，很多周边的东西（图片下载、缩略图等）都需要自己来实现。&lt;/p&gt;

&lt;p&gt;趁着近期在公司内部弄到了一台新的CentOS服务器的机会就索性使用Scrapy把前段时间写的空气质量采集的程序改写下，同时把SQLServer换成MySQL，顺便熟悉一下这块的知识。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/python-scrapy-spider/scrapy_logo.png&quot; alt=&quot;scrapy_logo.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;开发环境准备&quot;&gt;开发环境准备&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CentOS 6.5&lt;/code&gt;自带的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Python 2.6.6&lt;/code&gt;,使用Scrapy需要的Python版本是2.7，所以需要将Python的环境先升级。&lt;/p&gt;

&lt;h4 id=&quot;1准备安装python的环境&quot;&gt;1.准备安装Python的环境&lt;/h4&gt;

&lt;p&gt;(1)安装devtoolset&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum groupinstall &quot;Development tools&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)安装编译Python需要的包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install zlib-devel
yum install bzip2-devel
yum install openssl-devel
yum install ncurses-devel
yum install sqlite-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)安装MySQL驱动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install mysql-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2python开发环境安装&quot;&gt;2.Python开发环境安装&lt;/h4&gt;

&lt;p&gt;(1)下载Python2.7版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)解压&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -jxvf Python-2.7.11.tar.xz
cd Python-2.7.11
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)安装和编译&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --prefix=/usr/local
make &amp;amp;&amp;amp; make altinstall
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(4)将python命令指向最新的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s /usr/local/bin/python2.7 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(5)检查Python的版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3安装pip&quot;&gt;3.安装pip&lt;/h4&gt;

&lt;p&gt;(1)下载pip安装脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)执行安装脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python get-pip.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)使用pip镜像&lt;/p&gt;

&lt;p&gt;在安装某些包的时候可能会出现网络方面的问题，推荐使用国内的镜像方式进行安装，有如下镜像地址可供选择：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://mirrors.sohu.com/python/ 搜狐
http://pypi.douban.com/  豆瓣
http://pypi.hustunique.com/  华中理工大学
http://pypi.sdutlinux.org/  山东理工大学
http://pypi.mirrors.ustc.edu.cn/  中国科学技术大学
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装的时候使用如下的格式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip  install --index 镜像地址 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;4安装scrapy&quot;&gt;4.安装scrapy&lt;/h4&gt;

&lt;p&gt;(1)安装scrapy组件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install scrapy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)安装MySQLdb的组件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install MySQL-python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;scrapy快速入门&quot;&gt;Scrapy快速入门&lt;/h3&gt;

&lt;p&gt;Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/python-scrapy-spider/scrapy_architecture.png&quot; alt=&quot;scrapy_architecture.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1组件介绍&quot;&gt;1.组件介绍&lt;/h4&gt;

&lt;h5 id=&quot;1核心引擎scrapy-engine&quot;&gt;(1)核心引擎(Scrapy Engine)：&lt;/h5&gt;

&lt;p&gt;引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。&lt;/p&gt;

&lt;h5 id=&quot;2调度器scheduler&quot;&gt;(2)调度器(Scheduler)：&lt;/h5&gt;

&lt;p&gt;调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。&lt;/p&gt;

&lt;h5 id=&quot;3下载器downloader&quot;&gt;(3)下载器(Downloader)：&lt;/h5&gt;

&lt;p&gt;下载器负责获取页面数据并提供给引擎，而后提供给spider。&lt;/p&gt;

&lt;h5 id=&quot;4爬虫模块spiders&quot;&gt;(4)爬虫模块(Spiders)：&lt;/h5&gt;

&lt;p&gt;Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。&lt;/p&gt;

&lt;h5 id=&quot;5item-pipeline&quot;&gt;(5)Item Pipeline：&lt;/h5&gt;

&lt;p&gt;Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、 验证及持久化(例如存取到数据库中)。&lt;/p&gt;

&lt;h5 id=&quot;6下载器中间件downloader-middlewares&quot;&gt;(6)下载器中间件(Downloader middlewares):&lt;/h5&gt;

&lt;p&gt;下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。&lt;/p&gt;

&lt;h5 id=&quot;7spider中间件spider-middlewares&quot;&gt;(7)Spider中间件(Spider middlewares)&lt;/h5&gt;

&lt;p&gt;Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。&lt;/p&gt;

&lt;h4 id=&quot;2数据流&quot;&gt;2.数据流&lt;/h4&gt;

&lt;p&gt;Scrapy中的数据流由执行引擎控制，其过程如下:&lt;/p&gt;

&lt;p&gt;(1)引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。&lt;/p&gt;

&lt;p&gt;(2)引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。&lt;/p&gt;

&lt;p&gt;(3)引擎向调度器请求下一个要爬取的URL。&lt;/p&gt;

&lt;p&gt;(4)调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。&lt;/p&gt;

&lt;p&gt;(5)一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。&lt;/p&gt;

&lt;p&gt;(6)引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。&lt;/p&gt;

&lt;p&gt;(7)Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。&lt;/p&gt;

&lt;p&gt;(8)引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。&lt;/p&gt;

&lt;p&gt;(9)(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。&lt;/p&gt;

&lt;h3 id=&quot;使用示例&quot;&gt;使用示例&lt;/h3&gt;

&lt;h4 id=&quot;1创建项目&quot;&gt;1.创建项目&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrapy startproject tutorial
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2创建spider&quot;&gt;2.创建Spider&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrapy genspider pm25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3编写items&quot;&gt;3.编写Items&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pm25CityItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;city_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#城市的名称&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;home_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#对应数据的链接地址&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;city_pinyin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#城市的拼音&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;4完善spider&quot;&gt;4.完善Spider&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import scrapy
from tutorial.items import Pm25CityItem

class Pm25Spider(scrapy.Spider):
    name = &quot;pm25&quot;
    allowed_domains = [&quot;pm25.in&quot;]
    start_urls = [
        'http://www.pm25.in',
    ]

    def parse(self, response):
        sel = scrapy.Selector(response)
        citys = sel.xpath(&quot;//div[@class='all']/div[@class='bottom']/ul[@class='unstyled']/div[2]/li&quot;)
        city_items = []
        for city in citys:
            city_item = Pm25CityItem()
            href = ''.join(city.xpath('a/@href').extract()).strip()
            city_item['city_name'] = ''.join(city.xpath('a/text()').extract()).strip().encode(&quot;UTF-8&quot;)
            city_item['home_link'] = 'http://www.pm25.in' + href
            city_item['city_pinyin'] = href.split('/')[1]
            city_items.append(city_item)
       return city_items
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5配置settingspy文件&quot;&gt;5.配置settings.py文件&lt;/h4&gt;

&lt;h5 id=&quot;1配置mysql数据源&quot;&gt;(1)配置MySQL数据源&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MYSQL_HOST = '127.0.0.1'
MYSQL_DBNAME = 'test' #数据库名字
MYSQL_USER = 'root' #数据库账号
MYSQL_PASSWD = '123456' #数据库密码
MYSQL_PORT = 3306 #数据库端口
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2配置mysql存储的pipeline&quot;&gt;(2)配置MySQL存储的Pipeline&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ITEM_PIPELINES = {
    'tutorial.pipelines.MySQLStoreDataPipeline': 300, #保存到数据库
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;6数据的存储&quot;&gt;6.数据的存储&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;twisted.enterprise&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adbapi&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;uuid&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MySQLdb&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MySQLdb.cursors&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySQLStoreDataPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MYSQL_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MYSQL_DBNAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MYSQL_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MYSQL_PASSWD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursorclass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQLdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;use_unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adbapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MySQLdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbpool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runInteraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addErrback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#插入城市的数据到tbl_all_city中&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
                select 1 from tbl_all_city where city_pinyin = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s
        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'city_pinyin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
                insert into tbl_all_city(city_pinyin, city_name, home_link) values(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s)
            &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'city_pinyin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'city_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home_link'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'save to tbl_all_city: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#异常处理&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;7执行爬虫程序&quot;&gt;7.执行爬虫程序&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrapy crawl pm25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.scrapy.org&quot;&gt;《官方文档》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.cnblogs.com/dudu/p/4294238.html&quot;&gt;《在Linux CentOS 6.6上安装Python 2.7.9》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.jianshu.com/p/67efc5417249&quot;&gt;《解决centos6没办法安装mysql-devel的问题》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot;&gt;《Python pip安装》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 04:40:00 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/write-a-spider-with-scrapy.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/write-a-spider-with-scrapy.html</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Mac上Docker的安装和使用初探</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/docker-logo-compressed.png&quot; alt=&quot;docker-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.docker.com/&quot;&gt;Docker&lt;/a&gt; 是个划时代的开源项目，它彻底释放了虚拟化的威力，极大提高了应用的运行效率，降低了云计算资源供应的成本，同时让应用的部署、测试和分发都变得前所未有的高效和轻松！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.docker.com/&quot;&gt;Docker&lt;/a&gt; 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于2013年3月以 Apache 2.0 授权协议开源，主要项目代码在 &lt;a href=&quot;https://github.com/docker/docker&quot;&gt;GitHub&lt;/a&gt; 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动&lt;a href=&quot;https://www.opencontainers.org/&quot;&gt;开放容器联盟&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在平时的开发中经常需要在开发机器上面部署一些后台的环境，比如MySQL，Node.js，Python等，本文就以在Mac上面如何安装和配置一个MySQL数据库为基础简单介绍下Docker的初步使用。&lt;/p&gt;

&lt;h3 id=&quot;下载安装步骤&quot;&gt;下载安装步骤&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-mac/&quot;&gt;Docker for Mac&lt;/a&gt; 要求系统最低为 macOS 10.10.3 Yosemite，或者 2010 年以后的 Mac 机型，准确说是带 &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_virtualization#Intel-VT-d&quot;&gt;Intel MMU 虚拟化&lt;/a&gt;的，最低 4GB 内存。如果系统不满足需求，可以考虑安装 &lt;a href=&quot;https://docs.docker.com/toolbox/overview/&quot;&gt;Docker Toolbox&lt;/a&gt;。如果机器安装了 &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; 的话，VirtualBox 的版本不要低于 4.3.30。&lt;/p&gt;

&lt;h4 id=&quot;1下载&quot;&gt;1.下载&lt;/h4&gt;

&lt;p&gt;通过这个链接下载：&lt;a href=&quot;https://download.docker.com/mac/stable/Docker.dmg&quot;&gt;https://download.docker.com/mac/stable/Docker.dmg&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2安装&quot;&gt;2.安装&lt;/h4&gt;

&lt;p&gt;如同 macOS 其它软件一样，安装非常简单，双击下载的文件，然后将那只叫 &lt;a href=&quot;https://blog.docker.com/2013/10/call-me-moby-dock/&quot;&gt;Moby&lt;/a&gt; 的鲸鱼图标拖拽到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; 文件夹即可（其间可能会询问系统密码）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-dmg.png&quot; alt=&quot;install-mac-dmg.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3运行&quot;&gt;3.运行&lt;/h4&gt;

&lt;p&gt;从应用中找到 Docker 图标并点击运行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-apps.png&quot; alt=&quot;install-mac-apps.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行之后，会在右上角菜单栏看到多了一个鲸鱼图标，这个图标表明了 Docker 的运行状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-menubar.png&quot; alt=&quot;install-mac-menubar.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次点击图标，可能会看到这个安装成功的界面，点击 “Got it!” 可以关闭这个窗口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-success.png&quot; alt=&quot;install-mac-success.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以后每次点击鲸鱼图标会弹出操作菜单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-menu.png&quot; alt=&quot;install-mac-menu.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在国内使用 Docker 的话，需要配置加速器，在菜单中点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences...&lt;/code&gt;，然后查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; 标签，在其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry mirrors&lt;/code&gt; 部分里可以点击加号来添加加速器地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-docker-install/install-mac-preference-advanced.png&quot; alt=&quot;install-mac-preference-advanced.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;国内很多云服务商都提供了加速器服务，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(1)&lt;a href=&quot;https://cr.console.aliyun.com/#/accelerator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;阿里云加速器&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(2)&lt;a href=&quot;https://www.daocloud.io/mirror#accelerator-doc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DaoCloud 加速器&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(3)&lt;a href=&quot;http://docs.alauda.cn/feature/accelerator.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;灵雀云加速器&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注册用户并且申请加速器，会获得如 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mnt8vkd9.mirror.aliyuncs.com&lt;/code&gt; 这样的地址。我们需要将其配置给 Docker 引擎。&lt;/p&gt;

&lt;p&gt;安装完成后，在终端执行下面几个命令可以查看Docker的版本信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(1)&lt;code class=&quot;highlighter-rouge&quot;&gt;docker --version&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(2)&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose --version&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(3)&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine --version&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安装mysql&quot;&gt;安装MySQL&lt;/h3&gt;

&lt;h4 id=&quot;1下载mysql镜像&quot;&gt;1.下载MySQL镜像&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2使用镜像创建并启动容器&quot;&gt;2.使用镜像创建并启动容器&lt;/h4&gt;

&lt;p&gt;Docker以镜像为基础创建启动容器的方式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动成功后会在终端输出容器的ID，启动MySQL容器的脚本为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 127.0.0.1:3306:3306 \
			–-name mysql \
			-v /Users/zengjing/docker/mysql/data:/var/lib/mysql \
			-e MYSQL_ROOT_PASSWORD=”123456” mysql:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt;查看容器运行的情况。&lt;/p&gt;

&lt;p&gt;参数说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)  &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;表示容器将以后台模式运行，所有I/O数据只能通过网络资源或者共享卷组来进行交互。&lt;/li&gt;
  &lt;li&gt;(2)  &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 127.0.0.1:3306:3306&lt;/code&gt;将主机（127.0.0.1）的端口3306映射到容器的端口3306中。这样访问主机中的3306端口就等于访问容器中的3306端口。&lt;/li&gt;
  &lt;li&gt;(3) &lt;code class=&quot;highlighter-rouge&quot;&gt;--name mysql&lt;/code&gt;给容器取名为 mysql，这样方便识别。&lt;/li&gt;
  &lt;li&gt;(4) &lt;code class=&quot;highlighter-rouge&quot;&gt;-v /Users/zengjing/docker/mysql/data:/var/lib/mysql&lt;/code&gt;将本机的文件目录挂载到容器对应的目录（&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/mysql&lt;/code&gt;）中。这样可以通过数据卷实现容器中数据的持久化。&lt;/li&gt;
  &lt;li&gt;(5) &lt;code class=&quot;highlighter-rouge&quot;&gt;-e MYSQL_ROOT_PASSWORD=&quot;123456&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;表示设置环境变量，此处设置了mysql的root 用户的访问密码为 &lt;code class=&quot;highlighter-rouge&quot;&gt;123456&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;(6) &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql:latest&lt;/code&gt;表示使用 mysql 的最新镜像启动一个容器。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3使用mysql&quot;&gt;3.使用MySQL&lt;/h4&gt;

&lt;p&gt;完成上面的步骤之后就可以使用MySQL的客户端工具使用了,连接信息如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host: 127.0.0.1
Port: 3306
UserName: root
Password: 123456
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;https://docs.docker.com&quot;&gt;《Docker官方文档》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/&quot;&gt;《在 Docker 中使用 mysql》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;《Docker — 从入门到实践》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4..&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;amp;mid=2650712620&amp;amp;idx=1&amp;amp;sn=39b33e0f1dfc335e165051b2983f9192&amp;amp;scene=1&amp;amp;srcid=0908wpvocqwawzRQwEu9N1N7#rd&quot;&gt;《在 Mac 上跳舞的容器 — Docker》&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Nov 2016 00:05:53 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/using-docker-on-macos.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/using-docker-on-macos.html</guid>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>使用NSSM在Windows服务器上部署Node.js应用</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/nssm-node-deploy/node-logo.png&quot; alt=&quot;node-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近使用Node的Express框架做了一个简单的应用，原本是打算部署到CentOS服务器上面的，后来由于种种原因只能部署到Window的服务器上面了。Node.js在Linux上面部署非常的方便，可以使用&lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;forever&lt;/a&gt;或者&lt;a href=&quot;https://github.com/unitech/pm2&quot;&gt;pm2&lt;/a&gt;来做这个事情，而且使用起来非常的简单，后续有机会会单独介绍如何使用，在Windows下就是稍微有点麻烦了，这两个组件都不支持。&lt;/p&gt;

&lt;p&gt;找了一些资料发现了nssm这个工具，部署超级简单，而且会监控你安装的node服务，如果node挂了，nssm会自动重启它。下面记录下部署的步骤：&lt;/p&gt;

&lt;h3 id=&quot;1下载安装nssm&quot;&gt;(1)下载安装nssm&lt;/h3&gt;

&lt;p&gt;当前最新的&lt;a href=&quot;https://nssm.cc&quot;&gt;NSSM&lt;/a&gt;版本是2.24，可以到官网上下载最新版本。下载地址是&lt;code class=&quot;highlighter-rouge&quot;&gt;https://nssm.cc/release/nssm-2.24.zip&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;2安装服务&quot;&gt;(2)安装服务&lt;/h3&gt;

&lt;h4 id=&quot;1打开终端根据操作系统的位数3264进入到对应的文件夹下&quot;&gt;1）打开终端根据操作系统的位数(32/64)进入到对应的文件夹下：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd F:/nssm-2.24/win32
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;nssm的使用方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nssm install servername //创建servername服务
nssm start servername //启动服务
nssm stop servername //暂停服务
nssm restart servername //重新启动服务
nssm remove servername //删除创建的servername服务
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2执行创建服务的命令&quot;&gt;2）执行创建服务的命令&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nssm install hbtoutiaoapi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;hbtoutiaoapi&lt;/code&gt;这个是创建的Windows服务的名称，命令执行成功之后会弹出一个对话框，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nssm-node-deploy/nssm-install.png&quot; alt=&quot;nssm-install.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;①Path：指的是node.exe的路径&lt;/li&gt;
  &lt;li&gt;②Startup directory: 指的是启动的文件的路径&lt;/li&gt;
  &lt;li&gt;③Arguments: 指的是启动的文件的名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的说来其实就是相当于执行了&lt;code class=&quot;highlighter-rouge&quot;&gt;node.exe E:\hbtoutiaoapi\bin\www&lt;/code&gt;这个命令。填写完成之后点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Install service&lt;/code&gt;就行了，然后在系统的服务里面就可以看到了。在浏览器中访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt;，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nssm-node-deploy/preview.png&quot; alt=&quot;preview.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###参考资料&lt;/p&gt;

&lt;p&gt;1.&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;《Node.js官网》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://nssm.cc&quot;&gt;《NSSM - the Non-Sucking Service Manager》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://my.oschina.net/u/1582119/blog/316069&quot;&gt;《使用nssm在windows服务器上部署nodejs》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 10:15:53 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/using-nssm-deploy-node-on-windows.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/using-nssm-deploy-node-on-windows.html</guid>
        
        <category>Node</category>
        
        
      </item>
    
      <item>
        <title>iOS中KV数据库LevelDB的编译和使用</title>
        <description>&lt;p&gt;LevelDB是Google公司重量级工程师&lt;a href=&quot;http://research.google.com/people/jeff/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jeff Dean&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;http://research.google.com/people/sanjay/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sanjay Ghemawat&lt;/code&gt;&lt;/a&gt;发起的开源项目。LevelDB是一个持久化存储的KV系统，和Redis这种内存型的KV系统不同，LevelDB不会像Redis一样狂吃内存，而是将大部分数据存储到磁盘上。目前能够支持billion级别的数据量，在这个数量级别下还有着非常高的性能，主要归功于它的良好的设计。&lt;/p&gt;

&lt;p&gt;LevelDB开源并托管在GitHub上，项目的地址是：&lt;a href=&quot;https://github.com/google/leveldb&quot;&gt;https://github.com/google/leveldb&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有个来自LevelDB官方对LevelDB、TreeDB和SQLite3进行性能对比分析的测试，测试结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-leveldb/leveldb-speed.png&quot; alt=&quot;leveldb-speed.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结果显示，在顺序读写和随机写上，LevelDB 在性能上都遥遥领先。&lt;/p&gt;

&lt;p&gt;###编译iOS静态库&lt;/p&gt;

&lt;p&gt;####1.下载代码到本地&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/google/leveldb.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####2.编译项目代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd leveldb
CXXFLAGS=-stdlib=libc++ make PLATFORM=IOS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果出现如下报错信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c++ -stdlib=libc++ -I. -I./include -std=c++0x  -DOS_MACOSX -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT -O2 -DNDEBUG -fPIC -c db/builder.cc -o /db/builder.o
error: unable to open output file '/db/builder.o': 'Operation not permitted'
1 error generated.
make: *** [/db/builder.o] Error 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo CXXFLAGS=-stdlib=libc++ make PLATFORM=IOS&lt;/code&gt;这行命令即可。&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;（1）编译完成之后在&lt;code class=&quot;highlighter-rouge&quot;&gt;out-ios-universal&lt;/code&gt;这个目录下面会自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;libleveldb.a&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;libmemenv.a&lt;/code&gt;两个文件。&lt;/p&gt;

&lt;p&gt;（2）可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;lipo -info libleveldb.a&lt;/code&gt;检测生成的静态库支持的架构情况。默认支持&lt;code class=&quot;highlighter-rouge&quot;&gt;armv6 armv7 armv7s i386 x86_64 arm64&lt;/code&gt;所有的架构&lt;/p&gt;

&lt;p&gt;（3）头文件在&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;目录下面，后面会用到&lt;/p&gt;

&lt;p&gt;###在iOS中使用LevelDB&lt;/p&gt;

&lt;p&gt;LevelDB提供的是C++的API，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;https://rawgit.com/google/leveldb/master/doc/index.html&lt;/code&gt;这里查到具体的使用说明。使用C++确实是不太方便幸好有大神将这些接口使用Objective-C进行了一下包装，使用方式和NSUserDefaults一致，可以参考&lt;a href=&quot;http://www.tanhao.me/pieces/1397.html&quot;&gt;《轻量级的KV数据库LevelDB在Objective-C上的应用》&lt;/a&gt;这篇文章。&lt;/p&gt;

&lt;p&gt;为了便于使用和项目集成我将这个和编译好的静态库放在了一起做成一个库。可以直接使用CocoaPods进行集成。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'leveled-pd', :git =&amp;gt; 'https://github.com/hhtczengjing/leveldb-pd.git'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(1)初始化数据库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
NSString *pageDBPath = [docPath stringByAppendingPathComponent:@&quot;my_leveldb.ldb&quot;];
THLevelDB *myLevelDB = [THLevelDB levelDBWithPath:pageDBPath];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)存储数据&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[myLevelDB setString:@&quot;hello world&quot; forKey:@&quot;username&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)读取数据&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *str = [myLevelDB stringForKey:@&quot;username&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;没错就是这样方便。&lt;/p&gt;

&lt;p&gt;###参考资料&lt;/p&gt;

&lt;p&gt;1.&lt;a href=&quot;https://github.com/google/leveldb&quot;&gt;《Github Project Home》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://rawgit.com/google/leveldb/master/doc/index.html&quot;&gt;《LevelDB library documentation》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.tanhao.me/pieces/1397.html&quot;&gt;《轻量级的KV数据库LevelDB在Objective-C上的应用》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://blog.txx.im/blog/2014/01/20/build-leveldb/&quot;&gt;《编译leveldb for iOS》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;http://blog.nosqlfan.com/html/2819.html&quot;&gt;《LevelDB、TreeDB、SQLite3性能对比测试》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 12:15:53 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/ios-leveldb.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/ios-leveldb.html</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS中使用Protocol Buffers</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Protocol Buffer&lt;/code&gt;&lt;/a&gt;(简称&lt;code class=&quot;highlighter-rouge&quot;&gt;Protobuf&lt;/code&gt;)是由Google推出的一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或RPC数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Protobuf和XML相比同是数据交换协议，不过Protobuf更小、更快、也更简单。可以通过定义自己的数据结构，然后使用Protobuf的代码生成器生成代码，用生成的代码来读写这个数据结构。Protobuf具有如下几个优点：&lt;/p&gt;

&lt;p&gt;(1)“向后”兼容性好。不必担心因为消息结构的改变而造成的大规模的代码重构或者迁移的问题，因为添加新的消息中的字段并不会引起已经发布的程序的任何改变。&lt;/p&gt;

&lt;p&gt;(2)语义更清晰。Protobuf使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.proto&lt;/code&gt;文件描述数据交换的格式，然后Protobuf编译器会将&lt;code class=&quot;highlighter-rouge&quot;&gt;.proto&lt;/code&gt;文件编译生成对应的数据访问类以对&lt;code class=&quot;highlighter-rouge&quot;&gt;Protobuf&lt;/code&gt;数据进行序列化、反序列化操作），无需解释器之类的东西。&lt;/p&gt;

&lt;p&gt;(3)简单易学。使用Protobuf无需学习复杂的文档对象模型，它拥有良好的文档和示例，对于喜欢简单事物的人们而言，Protobuf比其他的技术更加有吸引力。&lt;/p&gt;

&lt;p&gt;Protobuf开源并托管在Github，项目地址是：&lt;a href=&quot;https://github.com/google/protobuf/&quot;&gt;https://github.com/google/protobuf/&lt;/a&gt;。目前Google提供了三种语言的实现：java、c++ 和python，每一种实现都包含了相应语言的编译器以及库文件。&lt;/p&gt;

&lt;p&gt;###Protocol协议格式说明&lt;/p&gt;

&lt;p&gt;要通信，必须有协议，否则双方无法理解对方的码流。在Protobuf中，协议是由一系列的消息组成的。因此最重要的就是定义通信时使用到的消息格式。消息由至少一个字段组合而成，类似于C语言中的结构。每个字段都有一定的格式。字段格式：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;限定修饰符① | 数据类型② | 字段名称③ | = | 字段编码值④ | [字段默认值⑤]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#####①．限定修饰符包含&lt;code class=&quot;highlighter-rouge&quot;&gt;required\optional\repeated&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Required&lt;/code&gt;: 表示是一个必须字段，必须相对于发送方，在发送消息之前必须设置该字段的值，对于接收方，必须能够识别该字段的意思。发送之前没有设置required字段或者无法识别required字段都会引发编解码异常，导致消息被丢弃。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt;：表示是一个可选字段，可选对于发送方，在发送消息时，可以有选择性的设置或者不设置该字段的值。对于接收方，如果能够识别可选字段就进行相应的处理，如果无法识别，则忽略该字段，消息中的其它字段正常处理。因为optional字段的特性，很多接口在升级版本中都把后来添加的字段都统一的设置为optional字段，这样老的版本无需升级程序也可以正常的与新的软件进行通信，只不过新的字段无法识别而已，因为并不是每个节点都需要新的功能，因此可以做到按需升级和平滑过渡。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Repeated&lt;/code&gt;：表示该字段可以包含0~N个元素。其特性和optional一样，但是每一次可以包含多个值。可以看作是在传递一个数组的值。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#####②．数据类型。&lt;/p&gt;

&lt;p&gt;Protobuf定义了一套基本数据类型。几乎都可以映射到C++\Java\Objective-C等语言的基础数据类型。数据类型如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ios-protobuf/protobuf_field_type.png&quot; alt=&quot;protobuf_field_type.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#####③．字段名称&lt;/p&gt;

&lt;p&gt;字段名称的命名与C、C++、Java和Objective-C等语言的变量命名方式几乎是相同的。Protobuf建议字段的命名采用以下划线分割的驼峰式。例如&lt;code class=&quot;highlighter-rouge&quot;&gt;first_name&lt;/code&gt;而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;firstName&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;#####④．字段编码值&lt;/p&gt;

&lt;p&gt;有了该值，通信双方才能互相识别对方的字段。当然相同的编码值，其限定修饰符和数据类型必须相同。编码值的取值范围为 1~2^32（4294967296）。&lt;/p&gt;

&lt;p&gt;其中 1~15的编码时间和空间效率都是最高的，编码值越大，其编码的时间和空间效率就越低（相对于1-15），当然一般情况下相邻的2个值编码效率的是相同的，除非2个值恰好实在4字节，12字节，20字节等的临界区。比如15和16。1900~2000编码值为Protobuf系统内部保留值，建议不要在自己的项目中使用。Protobuf还建议把经常要传递的值把其字段编码设置为1-15之间的值。消息中的字段的编码值无需连续，只要是合法的，并且不能在同一个消息中有字段包含相同的编码值。&lt;/p&gt;

&lt;p&gt;建议：项目投入运营以后涉及到版本升级时的新增消息字段全部使用optional或者repeated，尽量不使用required。如果使用了required，需要全网统一升级，如果使用optional或者repeated可以平滑升级。&lt;/p&gt;

&lt;p&gt;#####⑤．默认值。&lt;/p&gt;

&lt;p&gt;当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端。当接受数据是，对于optional字段，如果没有接收到optional字段，则设置为默认值。&lt;/p&gt;

&lt;p&gt;#####⑥．关于import&lt;/p&gt;

&lt;p&gt;Protobuf接口文件可以像C语言的h文件一个，分离为多个，在需要的时候通过import导入需要对文件。其行为和C语言的&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt;或者iOS中的的&lt;code class=&quot;highlighter-rouge&quot;&gt;#import&lt;/code&gt;的行为大致相同。&lt;/p&gt;

&lt;p&gt;#####⑦．关于package&lt;/p&gt;

&lt;p&gt;避免名称冲突，可以给每个文件指定一个package名称，对于java解析为java中的包。对于C++则解析为名称空间。&lt;/p&gt;

&lt;p&gt;#####⑧．关于message&lt;/p&gt;

&lt;p&gt;支持嵌套消息，消息可以包含另一个消息作为其字段。也可以在消息内定义一个新的消息。&lt;/p&gt;

&lt;p&gt;#####⑨．关于enum&lt;/p&gt;

&lt;p&gt;枚举的定义和C++相同，但是有一些限制。枚举值必须大于等于0的整数。使用分号(;)分隔枚举变量而不是C++语言中的逗号(,)&lt;/p&gt;

&lt;p&gt;###安装Protobuf Compiler&lt;/p&gt;

&lt;p&gt;目前Protobuf稳定的版本是&lt;a href=&quot;https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2.6.1&lt;/code&gt;&lt;/a&gt;,最新的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;v3.0.0-beta-3.1&lt;/code&gt;估计很快就会推出3.0的正式版本了。本文所有的操作都是基于2.6.1的版本。&lt;/p&gt;

&lt;p&gt;####1.检查是否安装Homebrew:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果没有安装可以通过下面的方式进行安装：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####2.安装Protobuf Compiler&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install automake 
brew install libtool 
brew install protobuf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;####3.创建Protobuf Compiler的符号链接(可选步骤)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /usr/local/Cellar/protobuf/2.6.1/bin/protoc /usr/local/bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####4.安装Objective-C的扩展&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/alexeyxo/protobuf-objc.git
cd protobuf-objc
./scripts/build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###集成Protobuf Runtime&lt;/p&gt;

&lt;p&gt;推荐使用CocoaPods的方式进行集成，在Podfile中加入下面的代码：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod 'ProtocolBuffers', '~&amp;gt; 1.9.10'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###示例&lt;/p&gt;

&lt;p&gt;####1.创建&lt;code class=&quot;highlighter-rouge&quot;&gt;.proto&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;option java_package = &quot;com.devzeng.statistics.proto&quot;;
package Statistics;

message AppContextMessage {
	required string net_connetion_type = 1;    //网络连接类型,可选值是wifi/wwan/unknown
	required string screen_resolution  = 2;    //屏幕分辨率
	optional string device_token		= 3;	//推送设备号
	optional string mac_address			= 4;	//mac地址
	optional string carrier_name 		= 5;	//运营商名称
	optional string device_model 		= 6;	//设备型号
	optional string wifi_name 			= 7;	//wifi名称
	optional string device_name 		= 8;	//设备名称
	required string device_type 		= 9;	//设备类型，可选值是iPhone/iPad/Android
	required string system_version 		= 10;	//系统版本
	required string device_uuid 		= 11;	//设备号
	optional string gps 				= 12;	//经纬度(latitude,longitude)
	required string app_version 		= 13;	//当前安装的APP版本号
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个比较好的习惯是认真对待proto文件的文件名。比如将命名规则定于如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;packageName.MessageName.proto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在上例中，package 名字叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;Statistics&lt;/code&gt;，定义了一个消息&lt;code class=&quot;highlighter-rouge&quot;&gt;AppContextMessage&lt;/code&gt;。那么可以可以命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;Statistics.AppContextMessage.proto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####2.使用Protobuf编译器生成平台相关的代码&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protoc --plugin=/usr/local/bin/protoc-gen-objc *.proto --objc_out=&quot;./&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####3.数据的序列化&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AppContextMessageBuilder *builder = [AppContextMessage builder];
[builder setNetConnetionType:@&quot;wifi&quot;];
[builder setScreenResolution:@&quot;&quot;];
[builder setMacAddress:@&quot;&quot;];
[builder setCarrierName:@&quot;中国联通&quot;];
[builder setDeviceModel:@&quot;&quot;];
[builder setWifiName:@&quot;my_wifi(8c:21:a:44:f0:c)&quot;];
[builder setDeviceType:@&quot;iPhone&quot;];
[builder setSystemVersion:@&quot;&quot;];
[builder setDeviceUuid:@&quot;&quot;];
[builder setDeviceName:@&quot;&quot;];
[builder setGps:@&quot;&quot;];
[builder setAppVersion:@&quot;1.0.1_20&quot;];
NSData *data = [builder build].data;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###参考资料&lt;/p&gt;

&lt;p&gt;1.&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;《Protobuf’s Documentation》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/&quot;&gt;《Google Protocol Buffer 的使用和原理》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.tanhao.me/code/150911.html/&quot;&gt;《Protocol Buffer搭建及示例》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/alexeyxo/protobuf-objc&quot;&gt;《Protocol Buffers for Objective-C》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 09:40:53 +0800</pubDate>
        <link>http://blog.devzeng.com/blog/ios-protobuf.html</link>
        <guid isPermaLink="true">http://blog.devzeng.com/blog/ios-protobuf.html</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>